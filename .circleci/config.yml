# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Hello World jobs
# This uses the "workflows functionality" section example structure for jobs
#   https://circleci.com/docs/2.0/getting-started/
jobs:
    print_hello:
        # Uses the docker executor
        docker:
            # Specifically a docker image with Node.JS 13.8.0
            - image: circleci/node:13.8.0
        steps:
            # Pulls code from Github
            - checkout
            # Prints "Hello" to stdout
            - run: echo "Hello"
    print_world:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: echo "World"

    print_myname:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run: echo $MY_NAME

    save_hello_world_output:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # First make directory
            - run: mkdir -p tmp_workspace
            - run: echo "Hello World" > tmp_workspace/output.txt
            # Persist output.txt to "workspace"
            - persist_to_workspace:
                root: tmp_workspace
                paths:
                    - output.txt

    print_output_file:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            # Reference the workspace
            - attach_workspace:
                at: tmp_workspace
            # Output contents of output.txt
            # Must be abs path per CircleCI docs
            - run: cat tmp_workspace/output.txt
# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - welcome/run  # This is the default beginning tutorial

  hello_world:  # this is the name of the workflow
    # list the jobs we want to run
    jobs:
        - print_hello
        - print_world:
            # Set a dependency on print_hello (i.e. waits for print_hello)
            requires:
                - print_hello
        - print_myname

  print_file:
    jobs:
        - save_hello_world_output
        - print_output_file:
            requires:
                - save_hello_world_output

  # The above can also be condensed like so:
  # welcome:
  #     jobs:
  #         - welcome/run
  #         - print_hello
  #         - print_world:
  #             requires:
  #                 - print_hello
  #         - print_myname
